# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1URw5cRDGH7PrgHY0jdCd5OrAk2X8F7a5
"""

import pandas as pd
import numpy as np
import matplotlib as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

#loading female diabetes dataset to pandas dataframe
diabetes_dataset=pd.read_csv('/content/diabetes (1).csv')



diabetes_dataset.head(5)

diabetes_dataset.tail(5)

#number of rowns and columns in he dataset
diabetes_dataset.shape

diabetes_dataset.describe()

diabetes_dataset.info()

#to check number of diabetic and non-diabetic patients in our dataset
diabetes_dataset['Outcome'].value_counts()

"""0 ---> Non- Diabetic             
1----> Diabetic
"""

# Grouping data based on diabetic condition
diabetes_dataset.groupby('Outcome').mean()

X=diabetes_dataset.drop(columns='Outcome',axis=1)
Y=diabetes_dataset['Outcome']

print(X)

print(Y)

# Initialize the StandardScaler and compute the mean and standard deviation of the dataset X
# Transform X to have mean 0 and variance 1.

scaler=StandardScaler()
scaler.fit(X)

#Applying standardization
standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diabetes_dataset['Outcome']

print(X)
print(Y)

#train test the data
# test size=0.2 represents 20% of the data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,stratify=Y,random_state=2)

#comparing shape of test , train and original data
print(X.shape,X_train.shape,X_test.shape)

"""Training the model"""

#We have used support vector classifier
classifier=svm.SVC(kernel='linear')

#Training the support vector machine classifier
classifier.fit(X_train,Y_train)

"""Model Evaluation"""

#Checking accuracy rate
X_train_prdeiction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(X_train_prdeiction,Y_train)

print('Accuracy score of the training data:',training_data_accuracy)

X_test_prediction=classifier.predict(X_test)
testing_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print('Accuracy score of the testing data:',testing_data_accuracy)

input_data=(4,110,92,0,0,37.6,0.191,30)

#changing input data into numpy array
input_data_as_numpy_array=np.asarray(input_data)

#reshape the array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)

#standardize the input data
std_data=scaler.transform(input_data_reshaped)
print(std_data)

prediction=classifier.predict(std_data)
print(prediction)

if prediction==0:
  print("The person is not daibetic")
else:
  print("The person is daibetic")